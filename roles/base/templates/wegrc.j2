# run the main playbook to ensure updated packages and proper configs
alias update="sudo git -C {{ config_repo_folder }} pull; sudo ansible-playbook {{ config_repo_folder }}/main.yml -t setup -e config_generate_config_file=1"

# run the main playbook to ensure updated packages and proper configs including latest rtw89_module
alias wifi_update="sudo git -C {{ config_repo_folder }} pull; sudo ansible-playbook {{ config_repo_folder }}/main.yml -t setup -e ensure_rtw89_module=True"

# run the base playbook to ensure proper configs
alias update_config="sudo git -C {{ config_repo_folder }} pull; sudo ansible-playbook {{ config_repo_folder }}/main.yml -t base"

# run the main playbook + enhanced packages
alias bigupdate="sudo git -C {{ config_repo_folder }} pull; sudo ansible-playbook {{ config_repo_folder }}/main.yml -t bigsetup -e config_extended_software=yes"

# install docker
alias install_docker="sudo ansible-playbook {{ config_repo_folder }}/main.yml -t docker"

# install webcam tools
alias install_webcam="sudo ansible-playbook {{ config_repo_folder }}/main.yml -t webcam"

# install fritzbox tools
alias install_fritzbox="sudo ansible-playbook {{ config_repo_folder }}/main.yml -t fritzbox"

# install rembg
alias install_rembg="sudo git -C {{ config_repo_folder }} pull; sudo ansible-playbook {{ config_repo_folder }}/main.yml -t setup -e enable_rembg=True"

# install gotify-desktop. Append server and token: -e gotify_host=myserver -e gotify_token=mytoken
alias install_gotify="sudo git -C {{ config_repo_folder }} pull; sudo ansible-playbook {{ config_repo_folder }}/main.yml -t gotify"

# install widgets
alias install_widgets="sudo ansible-playbook {{ config_repo_folder }}/main.yml -t widgets -e widget_force_install=1"

# install themes
alias install_themes="sudo ansible-playbook {{ config_repo_folder }}/main.yml -t themes,widgets -e widget_force_install=1"

# uninstall whitesur gdm and theme
alias uninstall_themes="sudo ansible-playbook {{ config_repo_folder }}/main.yml -t themes -e uninstall=True"

# downgrade to basic software packages
alias downgrade="sudo ansible-playbook {{ config_repo_folder }}/main.yml -t downgrade -e config_downgrade=True"

# install adblocking pihole
alias install_pihole="sudo git -C {{ config_repo_folder }} pull; sudo ansible-playbook {{ config_repo_folder }}/main.yml -t install_pihole -e config_install_state=1"

# uninstall adblocking pihole
alias uninstall_pihole="sudo git -C {{ config_repo_folder }} pull; sudo ansible-playbook {{ config_repo_folder }}/main.yml -t uninstall_pihole -e config_install_state=0"

# build fakecam docker image
alias build_fakecam="docker-compose -f /srv/webcam/fakecam/docker-compose.yml --env-file /srv/webcam/fakecam/docker_defaults.env build --no-cache --pull"

# if the git repos got somehow broken, with this command it gets deleted and cloned again.
alias reinstall="wget -qO setup.sh {{ config_repo_setup }} && chmod +x setup.sh  && sudo bash setup.sh && rm setup.sh"

# uninstall this playbook from system
alias uninstall="sudo git -C {{ config_repo_folder }} pull && sudo ansible-playbook {{ config_repo_folder }}/main.yml -t base -e config_uninstall_playbook=yes"

# disable tracker to reduce system load
alias disable_tracker="sudo ansible-playbook {{ config_repo_folder }}/main.yml -t base -e config_disable_tracker=True"

# get flatpak commit infos
alias flatpakinfo="flatpak remote-info --log flathub"

# ssh login over cloudflared tunnel
alias cssh='ssh -o StrictHostKeyChecking=accept-new -o ProxyCommand="/usr/local/bin/cloudflared access ssh --hostname %h"'

# support buttons in favorites
alias update_support='sudo git -C {{ config_repo_folder }} pull; sudo ansible-playbook {{ config_repo_folder }}/main.yml -t setup -e config_generate_config_file=1 -e config_show_support_in_favorites=1'
alias update_support_hide='sudo git -C {{ config_repo_folder }} pull; sudo ansible-playbook {{ config_repo_folder }}/main.yml -t setup -e config_generate_config_file=1 -e config_show_support_in_favorites=0'

# edit config file
alias edit_config='sudo gedit /root/.config/vars_sysconfig.yml'

# start teamviewer daemon, that is disabled by default
twstart() {
  /usr/local/bin/start_teamviewer.x -s
  /usr/bin/teamviewer >/dev/null 2>&1 &
}
export -f twstart

# creating a pdf that contains hardware informations
hwpdf() {
SERIAL=$(sudo inxi -v 2 -c 0 -y 80 | grep serial | head -1 | awk -v FS='(serial:|)' '{print $2}' | sed 's/^ //g')
{ date ; echo -e '\n' ; sudo inxi -Fmxx -c 0 -y 80; echo -e '\n\nBenutzer: \n\nPasswort: ';} | txt2html | wkhtmltopdf - ~/Downloads/"${SERIAL//[ \/()@$]/}"_$(date +"%Y%m%d")_SYSTEMINFO.pdf
}
export -f hwpdf

# A simple script to shred a drive
shreddrive() {
SERIAL=$(sudo inxi -v 2 -c 0 -y 80 | grep serial | head -1 | awk -v FS='(serial:|)' '{print $2}' | sed 's/^ //g')
sudo lsblk
echo -e "Enter device to shred: "
read shreddev
if [[ $USER != "ubuntu" ]]; then
  echo "Bad idea ... aborting. Please only use this tool from a live-system."
else
  { date ; sudo inxi -Fmxx -c 0 -y 80 ; echo -e "\n Shredding hard drive: shred -vz -n 0 /dev/$shreddev \n" ; sudo shred -vz -n 0 /dev/"$shreddev" && echo -e "\nDrive wiped!\n\nBenutzer: \n\nPasswort: " ;} | txt2html | wkhtmltopdf - ~/Downloads/"$SERIAL"_$(date +"%Y%m%d")_WIPE.pdf
fi
}
export -f shreddrive

# Fixing cubic DNS problem running on Ubuntu 18.04.
fixcubicdns() {
mkdir /run/systemd/resolve/
echo "nameserver 127.0.0.53
search network" | tee /run/systemd/resolve/resolv.conf
ln -sr /run/systemd/resolve/resolv.conf /run/systemd/resolve/stub-resolv.conf
}
export -f fixcubicdns

############################################################################
### copy home dir from remote host
alias get_network_ip="ifconfig -a | grep 'inet 192' | tr -s ' ' | cut -d ' ' -f 3"

append_ssh_key(){
if [ ! -f id_rsa.pub ]; then
 echo -e "id_rsa.pub not found."
else
 cat ./id_rsa.pub >> $HOME/.ssh/authorized_keys
fi
}

copy_ssh_key(){
if [ ! -f $HOME/.ssh/id_rsa.pub ]; then
 echo -e "id_rsa.pub not found."
else
 cp $HOME/.ssh/id_rsa.pub .
fi
}

copy_home() {
if [ $# -ne 2 ]; then
 echo -e "Please pass ssh host with user.\n\ncopy_home user host\n"
 echo -e "copy .ssh/id_rsa.pub from this host on an USB drive. Plug into other host, open terminal on USB drive and run\n\nappend_ssh_key id_rsa.pub\n"
 echo -e "run get_network_ip on other host to get the host ip adress"
else
 COPY_USER="$1"
 COPY_SERVER="$2"
 COPY_FROM="$1@$2:/home/$1"
 COPY_TO="$HOME"
 rsync -avzhs -P --partial --stats --timeout=30 -e ssh --delete-after --exclude ".ssh" "$COPY_FROM"/ "$COPY_TO"/
 read -r -p "Copy .ssh [y/N]: " response
 case "$response" in
     [yY][eE][sS]|[yY])
         rsync -avzhs -P --partial --stats --timeout=30 -e ssh --delete-after "$COPY_FROM"/.ssh "$COPY_TO"/
         ;;
     *)  return 1
         ;;
    esac
fi
}
############################################################################

# a script to open a wifi hotspot
openap() {
ssid=${1:-"wlan-hotspot"}
pw=${2:-$(pwgen 8 1)}
QRCODE="WIFI:S:$ssid;T:WPA;P:$pw;;"
qrencode -t ANSIUTF8 "$QRCODE"
echo -e "SSID:     $ssid \nPASSWORT: $pw\n"
inetdev=$(route | grep '^default' | grep -o '[^ ]*$' | head -n 1)

sudo rfkill unblock wifi
sudo rfkill unblock all

if [ -z "$inetdev" ]
then
      apdev=$(iw dev | awk '$1=="Interface"{print $2}' | grep -F 'w' | head -n 1)
      echo "Opening offline AP. [$apdev]"
      sudo lnxrouter --no-virt -g 5 --qr -n --ap $apdev $ssid -p $pw> /dev/null 2>&1
else
      apdev=$(iw dev | awk '$1=="Interface"{print $2}' | grep -v "$inetdev" | grep -F 'w' | head -n 1)
      echo "Opening link to internet. [$apdev $inetdev]"
      sudo lnxrouter --no-virt -g 5 --qr --ap $apdev $ssid -p $pw> /dev/null 2>&1
fi
}
export -f openap

############################################################################
## git functions and alias

# nice log format
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
git config --global alias.doc "log --color --graph --pretty=format:'%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit"

# generate pdf with documentation form git repo in current working directory
dgit () {
    # render README.md, if found
    pandoc README.md -V geometry:margin=1.5cm -o ./.README.pdf > /dev/null 2>&1 || echo "No README.md found."
    
    # render commit graph to PDF
    reponame=$(basename `git rev-parse --show-toplevel`)
    { echo "$reponame" ;date ; echo -e '\n'; git doc; } | aha -w | wkhtmltopdf -q -s A4 - ./.commits.pdf > /dev/null 2>&1

    # merge and A4 format reports
    ( pdftk ./.README.pdf ./.commits.pdf cat output ./."$reponame".pdf > /dev/null 2>&1 ) || pdfjam ./.commits.pdf -o ./"$reponame".pdf
    ( pdfjam ./."$reponame".pdf -o ./"$reponame".pdf > /dev/null 2>&1 ) || :

    # cleanup
    ( rm ./.README.pdf > /dev/null 2>&1 ) || :
    ( rm ./."$reponame".pdf > /dev/null 2>&1 ) || :
    ( rm ./.commits.pdf > /dev/null 2>&1 ) || :
}
export -f dgit

############################################################################