# run the main playbook to ensure updated packages and proper configs
alias update="sudo git -C {{ config_repo_folder }} pull; sudo ansible-playbook {{ config_repo_folder }}/main.yml -t setup"

# run the base playbook to ensure proper configs
alias update_config="sudo git -C {{ config_repo_folder }} pull; sudo ansible-playbook {{ config_repo_folder }}/main.yml -t base"

# run the main playbook + enhanced packages
alias bigupdate="sudo git -C {{ config_repo_folder }} pull; sudo ansible-playbook {{ config_repo_folder }}/main.yml -t bigsetup -e config_extended_software=yes"

# install docker
alias install_docker="sudo ansible-playbook {{ config_repo_folder }}/main.yml -t docker"

# install webcam tools
alias install_webcam="sudo ansible-playbook {{ config_repo_folder }}/main.yml -t install_webcam"

# install fritzbox tools
alias install_fritzbox="sudo ansible-playbook {{ config_repo_folder }}/main.yml -t fritzbox"

# install themes
alias install_themes="sudo ansible-playbook {{ config_repo_folder }}/main.yml -t themes"

# uninstall whitesur gdm and theme
alias uninstall_themes="sudo ansible-playbook {{ config_repo_folder }}/main.yml -t themes -e uninstall=True"

# downgrade to basic software packages
alias downgrade="sudo ansible-playbook {{ config_repo_folder }}/main.yml -t downgrade -e config_downgrade=True"

# install adblocking pihole
alias install_pihole="sudo git -C {{ config_repo_folder }} pull; sudo ansible-playbook {{ config_repo_folder }}/main.yml -t install_pihole -e config_install_state=1"

# uninstall adblocking pihole
alias uninstall_pihole="sudo git -C {{ config_repo_folder }} pull; sudo ansible-playbook {{ config_repo_folder }}/main.yml -t uninstall_pihole -e config_install_state=0"

# build fakecam docker image
alias build_fakecam="docker-compose -f /srv/webcam/fakecam/docker-compose.yml --env-file /srv/webcam/fakecam/docker_defaults.env build --no-cache --pull"

# enable teamviewer daemon, that is disabled by default
alias twstart="sudo killall /opt/teamviewer/tv_bin/TeamViewer; sudo teamviewer daemon enable"

# if the git repos got somehow broken, with this command it gets deleted and cloned again.
alias reinstall="wget -qO setup.sh {{ config_repo_setup }} && chmod +x setup.sh  && sudo bash setup.sh && rm setup.sh"

# uninstall this playbook from system
alias uninstall="sudo git -C {{ config_repo_folder }} pull && sudo ansible-playbook {{ config_repo_folder }}/main.yml -t base -e config_uninstall_playbook=yes"

# disable tracker to reduce system load
alias disable_tracker="sudo ansible-playbook {{ config_repo_folder }}/main.yml -t base -e config_disable_tracker=True"

# creating a pdf that contains hardware informations
hwpdf() {
SERIAL=$(sudo inxi -v 2 -c 0 -y 80 | grep serial | head -1 | awk -v FS='(serial:|)' '{print $2}' | sed 's/^ //g')
{ date ; echo -e '\n' ; sudo inxi -Fmxx -c 0 -y 80; echo -e '\n\nBenutzer: \n\nPasswort: ';} | txt2html | wkhtmltopdf - ~/Downloads/"${SERIAL//[ \/()@$]/}"_$(date +"%Y%m%d")_SYSTEMINFO.pdf
}
export -f hwpdf

# A simple script to shred a drive
shreddrive() {
SERIAL=$(sudo inxi -v 2 -c 0 -y 80 | grep serial | head -1 | awk -v FS='(serial:|)' '{print $2}' | sed 's/^ //g')
sudo lsblk
echo -e "Enter device to shred: "
read shreddev
if [[ $USER != "ubuntu" ]]; then
  echo "Bad idea ... aborting. Please only use this tool from a live-system."
else
  { date ; sudo inxi -Fmxx -c 0 -y 80 ; echo -e "\n Shredding hard drive: shred -vz -n 0 /dev/$shreddev \n" ; sudo shred -vz -n 0 /dev/"$shreddev" && echo -e "\nDrive wiped!\n\nBenutzer: \n\nPasswort: " ;} | txt2html | wkhtmltopdf - ~/Downloads/"$SERIAL"_$(date +"%Y%m%d")_WIPE.pdf
fi
}
export -f shreddrive

# Fixing cubic DNS problem running on Ubuntu 18.04.
fixcubicdns() {
mkdir /run/systemd/resolve/
echo "nameserver 127.0.0.53
search network" | tee /run/systemd/resolve/resolv.conf
ln -sr /run/systemd/resolve/resolv.conf /run/systemd/resolve/stub-resolv.conf
}
export -f fixcubicdns

# copy home dir from remote host
alias get_network_ip="ifconfig -a | grep 'inet 192' | tr -s ' ' | cut -d ' ' -f 3"

append_ssh_key(){
if [ ! -f id_rsa.pub ]; then
 echo -e "id_rsa.pub not found."
else
 cat ./id_rsa.pub >> $HOME/.ssh/authorized_keys
fi
}

copy_ssh_key(){
if [ ! -f $HOME/.ssh/id_rsa.pub ]; then
 echo -e "id_rsa.pub not found."
else
 cp $HOME/.ssh/id_rsa.pub .
fi
}

copy_home() {
if [ $# -ne 2 ]; then
 echo -e "Please pass ssh host with user.\n\ncopy_home user host\n"
 echo -e "copy .ssh/id_rsa.pub from this host on an USB drive. Plug into other host, open terminal on USB drive and run\n\nappend_ssh_key id_rsa.pub\n"
 echo -e "run get_network_ip on other host to get the host ip adress"
else
 COPY_USER="$1"
 COPY_SERVER="$2"
 COPY_FROM="$1@$2:/home/$1"
 COPY_TO="$HOME"
 rsync -avzhs -P --partial --stats --timeout=30 -e ssh --delete-after --exclude ".ssh" "$COPY_FROM"/ "$COPY_TO"/
 read -r -p "Copy .ssh [y/N]: " response
 case "$response" in
     [yY][eE][sS]|[yY])
         rsync -avzhs -P --partial --stats --timeout=30 -e ssh --delete-after "$COPY_FROM"/.ssh "$COPY_TO"/
         ;;
     *)  return 1
         ;;
    esac
fi
}
