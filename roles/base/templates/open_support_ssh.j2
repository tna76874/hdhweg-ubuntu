#!/bin/bash

if [[ $(/usr/bin/id -u) -ne 0 ]]; then
    echo "Not running as root"
    exit
fi

confirm() {
    # call with a prompt string or use a default
    read -r -p "$@"" [y/N]: " response
    case "$response" in
        [yY][eE][sS]|[yY])
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

start_team_viewer() {
  TVPASSWORD=`pwgen 12 1`
  TVID=`teamviewer --info | grep "TeamViewer ID" | cut -d ':' -f2 | xargs | tr -dc '[:alnum:]\n\r' |  sed 's/0m//'`
  sudo killall /opt/teamviewer/tv_bin/TeamViewer >/dev/null 2>&1
  sudo teamviewer daemon enable >/dev/null 2>&1
  export DISPLAY=":0.0" >/dev/null 2>&1
  teamviewer >/dev/null 2>&1
  sudo teamviewer passwd $TVPASSWORD >/dev/null 2>&1
  # Sending access data
  /usr/local/bin/gotify "TeamViewer: $TVID $TVPASSWORD" "TeamViewer Request"
  # Echo Access Data
  echo -e "ID: $TVID\nPW: $TVPASSWORD"
}

check_for_url() {
    export TURL=""
    touch /tmp/ctun
    while [[ $TURL == "" ]]; do
    export TURL="$(cat /tmp/ctun | grep -v 'developers.cloudflare.com' | grep 'https' | cut -d '|' -f2 | sed -e 's/^[[:space:]]*//' | sed 's/https:\/\///')"
    sleep 1
    done
}

SSHKEYS="{{ config_tunnel_ssh_keys }}"
JITSISERVER="https://www.kuketz-meet.de"
RANDID=`openssl rand -hex 16`

# Disclaimer
echo -e "Opening a support request will grant $SSHKEYS FULL system access. Only proceed if you absolutely trust the listed person!"
if ! $(confirm 'Opening support request?') ; then
    echo "EXIT without opening request!"
    sleep 2
    exit
fi

# Proceed with support request
echo -e "Please wait until the request tunnel is initiated. [Exit with CTRL+C]"

# Make sure temporary authorized keys file does not exist
trap "rm -f /root/.ssh/authorized_keys_temp; sudo killall cloudflared; rm -f /tmp/ctun; sudo teamviewer daemon disable" EXIT

# ensure .ssh directory
mkdir -p /root/.ssh

# Import temporary ssh keys
wget -q -O /root/.ssh/authorized_keys_temp "$SSHKEYS" &> /dev/null

# starting cloudflare tunnel in a screen session
screen -S cloudflare_tunnel -L -Logfile /tmp/ctun -d -m /usr/bin/cloudflared tunnel --url ssh://localhost:22

# getting URL from cloudflared and send via gotify
check_for_url
/usr/local/bin/gotify "cssh root@$TURL $JITSISERVER/$RANDID" "SSH Tunnel Request"

echo -e "Support request ssh channel is initalized.\n\nOpen in Browser for Meeting:\n$JITSISERVER/$RANDID\n\nAccess Endpoint for Support:\n$TURL\n\n"

# Optinal: TeamViewer
if $(confirm "Optional: Opening TeamViewer Session") ; then
    start_team_viewer
fi

echo -e "\n\n"

# wait until tunnel gets closed
read -r -p "Type ENTER to exit tunnel" response

# cleanup
screen -ls | awk -vFS='\t|[.]' '/cloudflare_tunnel/ {system("screen -S "$2" -X quit")}'
sudo killall cloudflared >/dev/null 2>&1
sudo teamviewer daemon disable >/dev/null 2>&1
rm -f /root/.ssh/authorized_keys_temp
rm -f /tmp/ctun

# delete trap
trap "" EXIT