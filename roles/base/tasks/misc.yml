---
- name: Grabbing UIDs
  getent:
    database: passwd

- name: Determine existing users
  shell: 'cat /etc/passwd | grep /bin/bash | grep -v root | grep -v guest | cut -d: -f1'
  changed_when: false 
  register: ubuntu_users

- name: Set facts
  set_fact:
    ubuntu_users_reg: "{{ ubuntu_users }}"

- name: Include vars file if present
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - vars.yml
        - /root/.config/vars_sysconfig.yml
      skip: true

- name: Ensure git repo
  ansible.builtin.git:
    repo: "{{ config_repo_url }}"
    dest: "{{ config_repo_folder }}"
    clone: yes
    update: yes
  changed_when: false
  ignore_errors: yes
  when: config_ensure_repo|bool

- name: Ensure root .config dir
  file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    state: directory
  loop:
    - { path: "/root/.config", owner: "root" }

- name: Ensure autopull state
  cron:
    name: "pulling ansible playbook at reboot"
    cron_file: "{{ config_autopull_repo_file }}"
    special_time: reboot
    job: "(sleep {{ config_autopull_repo_time }}; sudo git -C {{ config_repo_folder }} pull > /dev/null 2>&1)&"
    user: root
    state: "{% if config_autopull_repo|bool %}present{% else %}absent{% endif %}"

- name: disable TeamViewer daemon
  systemd:
    name: teamviewerd.service
    enabled: no
    state: stopped
  ignore_errors: yes
  when: ansible_facts['lsb']['id'] == "Ubuntu" and ansible_facts['lsb']['major_release']| int <= 20 and disable_teamviewer

- name: Ensuring cron file - running base script 15min after reboot
  cron:
    name: "running ansible playbook at reboot"
    special_time: reboot
    job: "(sleep {{ config_autorun_base_time }}; cd {{ config_repo_folder }}; ansible-playbook main.yml -t base > /dev/null 2>&1)&"
    user: root
    state: "{% if config_autorun_base|bool %}present{% else %}absent{% endif %}"
    cron_file: "{{ config_autorun_base_file }}"

- name: Ensure cron file states
  ansible.builtin.file:
    path: "{{ item.file }}"
    state: "{{ item.state }}"
  loop:
    - { file: "/etc/cron.d/{{ config_autopull_repo_file }}", state: "{% if config_autopull_repo|bool %}file{% else %}absent{% endif %}" }
    - { file: "/etc/cron.d/{{ config_autorun_base_file }}", state: "{% if config_autorun_base|bool %}file{% else %}absent{% endif %}" }

- name: Ensure anaconda install script
  template:
    src: install_anaconda.sh
    dest: "/srv/install_anaconda.sh"
    mode: 0755

- name: Ensure update icons
  copy:
    src: "{{ item.icon }}"
    dest: "{{ item.dest }}"
    mode: 0644
  loop:
    - { icon: "updateico.svg", dest: "/usr/share/icons/updateico.svg" }
    - { icon: "updateicoshutdown.svg", dest: "/usr/share/icons/updateicoshutdown.svg" }
    - { icon: "helpdesk.svg", dest: "/usr/share/icons/helpdesk.svg" }

- name: Ensure update desktop entrys
  template:
    src: "{{ item.entry }}"
    dest: "{{ item.dest }}"
    mode: 0644
  loop:
    - { entry: "update.desktop", dest: "/usr/share/applications/update.desktop" }
    - { entry: "updateshutdown.desktop", dest: "/usr/share/applications/updateshutdown.desktop" }
    - { entry: "support.desktop", dest: "/usr/share/applications/support.desktop" }

- name: Ensure scripts
  template:
    src: "{{ item.file }}"
    dest: "{{ item.destination }}"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: "{{ item.mode }}"
  become: yes
  loop:
    - { file: "backup.j2", destination: "/usr/local/bin/backup", owner: "root", mode: "0755" }
    - { file: "scan.j2", destination: "/usr/local/bin/scan", owner: "root", mode: "0755" }
    - { file: "gotify.j2", destination: "/usr/local/bin/gotify", owner: "root", mode: "0755" }
    - { file: "open_support_ssh.j2", destination: "/usr/local/bin/open_support_ssh", owner: "root", mode: "0750" }
    - { file: "update_gui.j2", destination: "/usr/local/bin/update_gui", owner: "root", mode: "0755" }

- name: Triggering upgrade handler
  assert: { that: true, quiet: true }
  changed_when: true
  when: config_perform_apt_upgrade|bool
  notify:
    - notification start apt
    - update apt
    - upgrade apt
    - notification stop apt
