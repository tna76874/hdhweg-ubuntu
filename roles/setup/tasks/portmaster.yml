- name: Portmaster set base path
  set_fact:
    portmaster_base_path: "/opt/safing/portmaster"

- name: Portmaster variables
  set_fact:
    preflight_portmaster_kernel_valid: "{{ (ansible_kernel.split('.')[0] | int > 5) or ((ansible_kernel.split('.')[0] | int == 5) and (ansible_kernel.split('.')[1] | int >= 7)) }}"
    preflight_portmaster_deb_is_installed: "{{ 'portmaster' in ansible_facts.packages }}"
    generated_api_key: "{{ lookup('password', '/dev/null length=50 chars=ascii_letters,digits') }}"
    portmaster_deb_url: "https://updates.safing.io/latest/linux_amd64/packages/portmaster-installer.deb"
    portmaster_group: portmasteruser
    portmaster_api_key_file: "{{ portmaster_base_path }}/API_KEY"
    portmaster_config_file: "{{ portmaster_base_path }}/config.json"
    portmaster_blocklist: "{{ portmaster_base_path }}/blocklist.txt"
    portmaster_install_status: "{{ portmaster_enabled is not defined or portmaster_enabled is none or portmaster_enabled }}"
    portmaster_nameservers:
      - "dot://dns.quad9.net?ip=9.9.9.9&name=Quad9&blockedif=empty"
      - "dot://dns.quad9.net?ip=149.112.112.112&name=Quad9&blockedif=empty"
      - "dot://cloudflare-dns.com?ip=1.1.1.2&name=Cloudflare&blockedif=zeroip"
      - "dot://cloudflare-dns.com?ip=1.0.0.2&name=Cloudflare&blockedif=zeroip"
    portmaster_blocked_cc:
      - CN
      - RU
      - IR

#### DEBUG MESSAGES #############
- name: Debug messages
  debug:
    msg:
      - "{{ 'Valid kernel for portmaster' if preflight_portmaster_kernel_valid else 'Invalid kernel for portmaster' }}"
      - "{{ 'Portmaster is installed' if preflight_portmaster_deb_is_installed else 'Portmaster is not installed' }}"
      - "Installation status: {{ portmaster_install_status }}"
  when: portmaster_debug|default(False)

#################################

- name: Ensure initial portmaster script
  block:
    - apt:
        deb: "{{ portmaster_deb_url }}"
        state: present
      register: install_result

    - name: Install missing dependencies
      apt:
        name: "*"
        state: present
      when: install_result.failed

    - name: reload systemd
      systemd:
        daemon_reload: yes

  rescue:
    - name: Install missing dependencies
      apt:
        name: "*"
        state: present
  when: preflight_portmaster_deb_is_installed == False and preflight_portmaster_kernel_valid == True and portmaster_install_status == True

- name: Aktiviere und starte den Portmaster-Dienst
  systemd:
    name: portmaster
    enabled: yes
    state: started
  when: preflight_portmaster_deb_is_installed == False and preflight_portmaster_kernel_valid == True and portmaster_install_status == True

- name: Ensure portmaster settings
  block:
    - name: Ensure the portmasteruser group exists
      group:
        name: "{{ portmaster_group }}"
        state: present

    - name: Determine existing sudo users
      shell: 'grep sudo /etc/group | cut -d: -f4 | tr , "\n"'
      changed_when: false 
      register: sudo_users

    - name: Ensure sudo users are in portmasteruser group
      user:
        name: '{{ item }}'
        groups: "{{ portmaster_group }}"
        append: yes
        state: present
      with_items: '{{ sudo_users.stdout_lines }}'

    - name: Set permissions for portmaster-start
      file:
        path: "{{ portmaster_base_path }}/portmaster-start"
        mode: 0750

    - name: Set the group for portmaster-start to portmasteruser
      file:
        path: "{{ portmaster_base_path }}/portmaster-start"
        group: "{{ portmaster_group }}"
  when: preflight_portmaster_kernel_valid == True and portmaster_install_status == True

- name: Ensure portmaster config / API
  block:
    - name: Check if the file exists
      stat:
        path: "{{ portmaster_api_key_file }}"
      register: api_key_file_stat

    - name: Write the generated API Key to the file
      copy:
        content: "{{ generated_api_key }}"
        dest: "{{ portmaster_api_key_file }}"
      when: not api_key_file_stat.stat.exists

    - name: Read the API Key from the file
      slurp:
        path: "{{ portmaster_api_key_file }}"
      register: api_key_content

    - name: Set the read API Key as a variable
      set_fact:
        portmaster_api_key: "{{ api_key_content.content | b64decode | regex_replace('\\\\n', '') }}"

    - name: Render templates
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: '0600'
      loop:
        - {src: portmaster.json, dest: "{{ portmaster_config_file }}"}
        - {src: portmaster_blocklist.txt, dest: "{{ portmaster_blocklist }}"}
      notify:
        - reload portmaster

  when: preflight_portmaster_kernel_valid == True and portmaster_install_status == True
########### UNINSTALL ###########

- name: Uninstall portmaster
  block:
    - name: Ensure portmaster package is absent
      apt:
        name: portmaster
        state: absent

    - name: reload systemd
      systemd:
        daemon_reload: yes
  when: preflight_portmaster_deb_is_installed == True and preflight_portmaster_kernel_valid == True and portmaster_install_status == False