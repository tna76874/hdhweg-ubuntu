---
- name: Cleanup apt block
  block:
    - name: ensure apt update with updated labels
      shell: "apt-get update --allow-releaseinfo-change"
      args:
        warn: false
      ignore_errors: yes
      become: yes
      

    - name: Ensure no interrupted system update
      shell: dpkg --configure -a
      become: yes
      changed_when: false
      register: apt_return
      until: apt_return.rc | default(0) == 0
      retries: 30
      delay: 30

- name: Ensure ppa's states
  apt_repository:
    repo: "{{ item.ppa }}"
    state: "{{ item.state }}"
  with_items: "{{ config_apt_ppa_list }}"
  when: item.state == 'absent' or ansible_facts['lsb']['major_release']| int <= item.ubuntu_max_release

- name: Ensure key states
  apt_key:
    url: "{{ item.url }}"
    state: "{{ item.state }}"
    file: "{{ item.dest }}"
  loop: "{{ config_apt_keys }}"
  ignore_errors: yes

- name: Ensure key states (curl)
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
  loop: "{{ config_apt_keys_curl }}"
  ignore_errors: yes

- name: Ensure source states
  apt_repository:
    repo: "{{ item.repo }}"
    state: "{{ item.state }}"
    filename: "{{ item.filename }}"
    update_cache: false
  loop: "{{ config_apt_sources }}"

- name: Triggering upgrade handler
  assert: { that: true, quiet: true }
  changed_when: true
  when: not config_perform_apt_upgrade|default(false)
  notify:
    - update apt
    - upgrade apt

- name: Triggering dist upgrade and autoremove handler
  assert: { that: true, quiet: true }
  changed_when: true
  notify:
    - dist-upgrade
    - autoremove apt

- name: Flush handlers
  meta: flush_handlers

- name: Ensure update alias in bashrc of new create user
  lineinfile:
    path: "/etc/default/grub"
    regexp: '^GRUB_DISABLE_OS_PROBER=(.*)$'
    line: GRUB_DISABLE_OS_PROBER=false
  when: ansible_facts['lsb']['major_release']| int >= 22
  notify:
    - update grub

- name: Ensure apt packages
  apt:
    name: "{{ config_apt_list }}"
    state: latest
    install_recommends: yes

- name: Ensure pipewire
  apt:
    name: "{{ config_apt_pipewire }}"
    state: "{{ 'latest' if config_pipewire_enabled|bool else 'absent' }}"
  ignore_errors: yes
  when: ansible_facts['lsb']['id'] == "Ubuntu" and ansible_facts['lsb']['major_release']| int == 20
  notify:
   - reload systemd
   - setting pulseaudio systemd state
   - setting pipewire systemd state

- name: Flush handlers
  meta: flush_handlers

- name: Ensure apt packages absent
  apt:
    name: "{{ config_apt_list_absent }}"
    state: absent

- name: Ensure apt packages purged
  apt:
    name:
      - gnome-software-plugin-snap
    state: absent
    purge: yes

- name: Ensure packages for ubuntu 20
  apt:
    name:
      - python-is-python3
      - heif-gdk-pixbuf
    state: latest
    install_recommends: yes
  when: ansible_facts['lsb']['id'] == "Ubuntu" and ansible_facts['lsb']['major_release']| int == 20

- name: Query duplicati releases from github
  uri:                                                               
    url: https://api.github.com/repos/duplicati/duplicati/releases
    return_content: true                                             
  register: duplicati_source   
  ignore_errors: yes                                          

- name: Register duplicati beta url
  set_fact:
    duplicati_beta:  "{{ duplicati_source.json | selectattr('tag_name', 'contains', '_beta_') | list }}"
  ignore_errors: yes

- name: Register duplicati deb url
  set_fact:
    duplicati_deb:  "{{ duplicati_beta[0]['assets'] | selectattr('browser_download_url', 'contains', 'all.deb') | list }}"
  ignore_errors: yes

- name: Ensure duplicati
  apt:
    deb: "{{ duplicati_deb[0]['browser_download_url'] }}"
  ignore_errors: yes

- name: Ensure TeamViewer
  apt:
    deb: "https://download.teamviewer.com/download/linux/teamviewer_amd64.deb"
  ignore_errors: yes
  when: teamviewer_enabled|default(False)

- name: Ensure libs to play DVDs
  block:
    - name: Ensure libdvd-pkg apt packages
      apt:
        name:
          - libdvd-pkg
          - "{{ 'libdvdread7' if ansible_facts['lsb']['major_release']| int == 20 else ( 'libdvdread8' if ansible_facts['lsb']['major_release']| int == 22 else 'libdvdread' ) }}"
        state: latest
        install_recommends: yes
      ignore_errors: yes
      notify:
        - configure libdvd-pkg

    - name: Configure libdvd-pkg debconf
      ansible.builtin.debconf:
        name: "{{ item.name }}"
        question: "{{ item.question }}"
        value: "{{ item.value }}"
        vtype: "{{ item.vtype }}"
      loop:
        - {name: "libdvd-pkg", question: 'libdvd-pkg/first-install', value: 'true', vtype: "select"}
        - {name: "libdvd-pkg", question: 'libdvd-pkg/post-invoke_hook-install', value: 'true', vtype: "select"}
        - {name: "libdvd-pkg", question: 'libdvd-pkg/build', value: 'true', vtype: "select"}
        - {name: "libdvd-pkg", question: 'libdvd-pkg/upgrade', value: 'true', vtype: "select"}
      notify:
        - configure libdvd-pkg
  ignore_errors: yes
  become: yes
  when: ensure_dvd_libs|default(False)

- name: Ensure rustdesk
  block:
    - name: Query rustdesk release from github
      uri:
        url: https://api.github.com/repos/rustdesk/rustdesk/releases
        return_content: true
      register: rustdesk_github_releases

    - name: Register rustdesk url
      set_fact:
        rustdesk_url_deb: "{{ ((rustdesk_github_releases.json | rejectattr('tag_name', 'equalto', 'nightly') | list)[0]['assets'] | rejectattr('name', 'contains', 'armhf') | selectattr('name', 'contains', '.deb') | list)[0]['browser_download_url'] }}"

    - name: Ensure rustdesk
      apt:
        deb: "{{ rustdesk_url_deb }}"
      ignore_errors: yes

    - name: Ensure RustDesk server disabled
      systemd:
        name: rustdesk
        enabled: no
        state: stopped
      ignore_errors: yes
  ignore_errors: yes
  become: yes